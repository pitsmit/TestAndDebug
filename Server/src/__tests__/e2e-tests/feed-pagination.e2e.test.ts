import axios, { AxiosInstance, AxiosResponse } from 'axios';
import { parameter, step } from "allure-js-commons";

describe('–õ–µ–Ω—Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π', () => {
    let httpClient: AxiosInstance;
    let response: AxiosResponse;
    let baseURL: string = 'http://localhost:3000'; // –ë–µ–∑ /api/v1

    beforeAll(async () => {
        httpClient = axios.create({
            baseURL,
            timeout: 15000,
            headers: {
                'Content-Type': 'application/json'
            }
        });

        // –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        await waitForServer();
    });

    async function waitForServer(retries = 30, delay = 2000): Promise<void> {
        console.log('‚è≥ Waiting for server to start...');

        for (let i = 0; i < retries; i++) {
            try {
                // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨: /api/health
                const healthResponse = await httpClient.get('/api/health');
                console.log(`‚úÖ Server is ready! (attempt ${i + 1}/${retries})`);
                console.log('Health check:', healthResponse.data);
                return;
            } catch (error: any) {
                console.log(`‚è≥ Server not ready yet... (attempt ${i + 1}/${retries})`);
                if (i === retries - 1) {
                    console.error('‚ùå Server failed to start within expected time');
                    throw new Error(`Server not available after ${retries} attempts: ${error.message}`);
                }
                await new Promise(resolve => setTimeout(resolve, delay));
            }
        }
    }

    test('–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–µ–Ω—Ç—ã', async () => {
        // ARRANGE
        await step('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞', async () => {
            await parameter("page", "1");
            await parameter("limit", "5");
        });

        // ACT
        await step('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ GET –∑–∞–ø—Ä–æ—Å–∞ –∫ –ª–µ–Ω—Ç–µ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤', async () => {
            try {
                console.log('üîÑ Sending request to /api/v1/feed...');
                // –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–£–¢–¨ –¥–ª—è feed - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤ swagger
                response = await httpClient.get('/api/v1/feed', {
                    params: { page: 1, limit: 5 },
                    timeout: 10000
                });
                console.log('‚úÖ Request successful');
                console.log('üìä Response status:', response.status);
                console.log('üìä Response data:', JSON.stringify(response.data, null, 2));
            } catch (error: any) {
                console.error('‚ùå Request failed:', error.message);
                console.error('Error code:', error.code);
                console.error('Error config:', error.config?.url);
                throw error;
            }
        });

        // ASSERT
        await step('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞', async () => {
            expect(response.status).toBe(200);

            if (response.data.anekdots) {
                expect(Array.isArray(response.data.anekdots)).toBe(true);

                response.data.anekdots.forEach((anekdot: any) => {
                    expect(anekdot).toHaveProperty('id');
                    expect(anekdot).toHaveProperty('content');
                    expect(anekdot).toHaveProperty('hasBadWords');
                    expect(anekdot).toHaveProperty('lastModifiedDate');
                });
            }
        });
    }, 30000);
});