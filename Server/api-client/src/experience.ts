import { ApiClient } from './api-client';
import inquirer from 'inquirer';

export abstract class Experience {
    public constructor(protected client: ApiClient) {}

    protected async inputNumber(message: string): Promise<number> {
        const { answer } = await inquirer.prompt([
            {
                type: 'input',
                name: 'answer',
                message,
                validate: (input: string) => {
                    const num = Number(input);
                    return !isNaN(num) ? true : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ';
                }
            }
        ]);
        return Number(answer);
    }

    protected async inputText(message: string): Promise<string> {
        const { answer } = await inquirer.prompt([
            {
                type: 'input',
                name: 'answer',
                message
            }
        ]);
        return answer;
    }

    protected async showLenta(): Promise<void> {
        let page = 1;
        const limit = 10;

        while (true) {
            try {
                const result = await this.client.getAnekdots(page, limit);

                console.log(`\nüìú –õ–µ–Ω—Ç–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):`);

                if (result && result.length > 0) {
                    result.forEach((anekdot: any) => {
                        console.log(`ID: ${anekdot.id} | ${anekdot.hasBadWords ? 'üîû' : '‚úÖ'} | ${anekdot.text}`);
                    });
                } else {
                    console.log('üì≠ –ê–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–µ—Ç');
                    break;
                }

                const { continueReading } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'continueReading',
                        message: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É?',
                        default: true
                    }
                ]);

                if (continueReading) {
                    page++;
                } else {
                    break;
                }
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data?.message || error.message);
                break;
            }
        }
    }

    abstract main(): Promise<void>;
}