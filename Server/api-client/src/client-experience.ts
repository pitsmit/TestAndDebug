import { Experience } from './experience.js';
import inquirer from 'inquirer';

export class ClientExperience extends Experience {
    async main(): Promise<void> {
        console.log('üë§ –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

        while (true) {
            const { action } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'action',
                    message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    choices: [
                        { name: '‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', value: 'add_favourite' },
                        { name: '‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ', value: 'remove_favourite' },
                        { name: 'üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É', value: 'lenta' },
                        { name: '‚ù§Ô∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ', value: 'favourites' },
                        { name: 'üö™ –í—ã–π—Ç–∏', value: 'exit' }
                    ]
                }
            ]);

            try {
                switch (action) {
                    case 'add_favourite':
                        await this.addToFavourites();
                        break;

                    case 'remove_favourite':
                        await this.removeFromFavourites();
                        break;

                    case 'lenta':
                        await this.showLenta();
                        break;

                    case 'favourites':
                        await this.showFavourites();
                        break;

                    case 'exit':
                        console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                        return;
                }
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data?.message || error.message);
            }
        }
    }

    private async addToFavourites(): Promise<void> {
        const anekdotId = await this.inputNumber('–í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–µ–∫–¥–æ—Ç–∞:');
        await this.client.addToFavourites(anekdotId);
        console.log('‚úÖ –ê–Ω–µ–∫–¥–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!');
    }

    private async removeFromFavourites(): Promise<void> {
        const anekdotId = await this.inputNumber('–í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–µ–∫–¥–æ—Ç–∞:');
        await this.client.removeFromFavourites(anekdotId);
        console.log('‚úÖ –ê–Ω–µ–∫–¥–æ—Ç —É–¥–∞–ª–µ–Ω –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ!');
    }

    private async showFavourites(): Promise<void> {
        let page = 1;
        const limit = 10;

        while (true) {
            try {
                const result = await this.client.getFavourites(page, limit);
                console.log(result)

                console.log(`\n‚ù§Ô∏è –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}):`);
                if (result && result.length > 0) {
                    result.forEach((anekdot: any) => {
                        console.log(`ID: ${anekdot.id} | ${anekdot.hasBadWords ? 'üîû' : '‚úÖ'} | ${anekdot.text}`);
                    });
                } else {
                    console.log('üì≠ –ê–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–µ—Ç');
                    break;
                }

                const { continueReading } = await inquirer.prompt([
                    {
                        type: 'confirm',
                        name: 'continueReading',
                        message: '–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?',
                        default: true
                    }
                ]);

                if (continueReading) {
                    page++;
                } else {
                    break;
                }
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data?.message || error.message);
                break;
            }
        }
    }
}