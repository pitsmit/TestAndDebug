import { Experience } from './experience.js';
import inquirer from 'inquirer';
import {AdminExperience} from "./admin-experience";
import {ClientExperience} from "./client-experience";

export class VisitorExperience extends Experience {
    async main(): Promise<void> {
        while (true) {
            const { action } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'action',
                    message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    choices: [
                        { name: 'üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤', value: 'lenta' },
                        { name: 'üîê –í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É', value: 'login' },
                        { name: 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', value: 'register' },
                        { name: 'üö™ –í—ã–π—Ç–∏', value: 'exit' }
                    ]
                }
            ]);

            try {
                switch (action) {
                    case 'lenta':
                        await this.showLenta();
                        break;

                    case 'login':
                        await this.login();
                        break;

                    case 'register':
                        await this.register();
                        break;

                    case 'exit':
                        console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                        return;
                }
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data?.message || error.message);
            }
        }
    }

    private async login(): Promise<void> {
        const credentials = await inquirer.prompt([
            { type: 'input', name: 'login', message: '–õ–æ–≥–∏–Ω:' },
            { type: 'password', name: 'password', message: '–ü–∞—Ä–æ–ª—å:' }
        ]);

        const user = await this.client.login(credentials.login, credentials.password);
        console.log('‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥!');

        if (user.role === 1) {
            await new AdminExperience(this.client).main();
        } else {
            await new ClientExperience(this.client).main();
        }
    }

    private async register(): Promise<void> {
        const data = await inquirer.prompt([
            { type: 'input', name: 'login', message: '–õ–æ–≥–∏–Ω:' },
            { type: 'password', name: 'password', message: '–ü–∞—Ä–æ–ª—å:' },
            { type: 'input', name: 'name', message: '–û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è:' },
            {
                type: 'list',
                name: 'role',
                message: '–†–æ–ª—å:',
                choices: [
                    { name: 'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', value: 0 },
                    { name: 'üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', value: 1 }
                ]
            }
        ]);

        const user = await this.client.register(
            data.login,
            data.password,
            data.name,
            data.role
        );

        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è!');

        if (user.role === 1) {
            await new AdminExperience(this.client).main();
        } else {
            await new ClientExperience(this.client).main();
        }
    }
}