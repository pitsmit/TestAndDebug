import { Experience } from './experience.js';
import inquirer from 'inquirer';

export class AdminExperience extends Experience {
    async main(): Promise<void> {
        console.log('üëë –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');

        while (true) {
            const { action } = await inquirer.prompt([
                {
                    type: 'list',
                    name: 'action',
                    message: '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                    choices: [
                        { name: 'üìù –î–æ–±–∞–≤–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç', value: 'create' },
                        { name: '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç', value: 'update' },
                        { name: 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç', value: 'delete' },
                        { name: 'üìú –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–µ–Ω—Ç—É', value: 'lenta' },
                        { name: 'üö™ –í—ã–π—Ç–∏', value: 'exit' }
                    ]
                }
            ]);

            try {
                switch (action) {
                    case 'create':
                        await this.createAnekdot();
                        break;

                    case 'update':
                        await this.updateAnekdot();
                        break;

                    case 'delete':
                        await this.deleteAnekdot();
                        break;

                    case 'lenta':
                        await this.showLenta();
                        break;

                    case 'exit':
                        console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                        return;
                }
            } catch (error: any) {
                console.error('‚ùå –û—à–∏–±–∫–∞:', error.response?.data?.message || error.message);
            }
        }
    }

    private async createAnekdot(): Promise<void> {
        const text = await this.inputText('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∞–Ω–µ–∫–¥–æ—Ç–∞:');
        await this.client.createAnekdot(text);
        console.log('‚úÖ –ê–Ω–µ–∫–¥–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
    }

    private async updateAnekdot(): Promise<void> {
        const id = await this.inputNumber('–í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–µ–∫–¥–æ—Ç–∞:');
        const text = await this.inputText('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç:');
        await this.client.updateAnekdot(id, text);
        console.log('‚úÖ –ê–Ω–µ–∫–¥–æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω!');
    }

    private async deleteAnekdot(): Promise<void> {
        const id = await this.inputNumber('–í–≤–µ–¥–∏—Ç–µ ID –∞–Ω–µ–∫–¥–æ—Ç–∞:');
        await this.client.deleteAnekdot(id);
        console.log('‚úÖ –ê–Ω–µ–∫–¥–æ—Ç —É–¥–∞–ª–µ–Ω!');
    }
}