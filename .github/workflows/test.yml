name: Node.js Tests in Docker Container

on: [push, pull_request]

jobs:
  #unit-integration-tests:
  #  runs-on: ubuntu-latest
#
  #  services:
  #    postgres:
  #      image: postgres:13-alpine
  #      env:
  #        POSTGRES_DB: anekdot_test
  #        POSTGRES_USER: postgres
  #        POSTGRES_PASSWORD: password
  #      options: >-
  #        --health-cmd pg_isready
  #        --health-interval 10s
  #        --health-timeout 5s
  #        --health-retries 5
  #      ports:
  #        - 5432:5432
#
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v4
#
  #    - name: Build test container
  #      run: |
  #        docker build -f Dockerfile.client -t my-tests .
#
  #    - name: Wait for PostgreSQL
  #      run: |
  #        until pg_isready -h localhost -p 5432; do
  #          echo "Waiting for database..."
  #          sleep 2
  #        done
#
  #    - name: Run unit tests
  #      id: unit-tests
  #      run: |
  #        docker run --rm \
  #          --network host \
  #          -v "$(pwd)/test-results:/app/allure-results" \
  #          -v "$(pwd)/allure-history:/app/allure-history" \
  #          my-tests \
  #          sh -c "npm run test:unit"
#
  #    - name: Run integration tests
  #      id: integration-tests
  #      if: steps.unit-tests.outcome == 'success'
  #      run: |
  #        docker run --rm \
  #          --network host \
  #          -v "$(pwd)/test-results:/app/allure-results" \
  #          -v "$(pwd)/allure-history:/app/allure-history" \
  #          my-tests \
  #          sh -c "npm run test:integration"
#
  #    - name: Generate Allure HTML Report for Unit/Integration
  #      if: always()
  #      run: |
  #        npm install -g allure-commandline
  #        mkdir -p allure-history
  #        allure generate test-results -o allure-report-unit-integration --clean --history-dir allure-history
  #        cp -r allure-history/. allure-report-unit-integration/history/ || echo "No history to copy"
#
  #    - name: Upload Unit/Integration test results
  #      if: always()
  #      uses: actions/upload-artifact@v4
  #      with:
  #        name: unit-integration-test-results
  #        path: |
  #          allure-report-unit-integration/
  #          test-results/
  #        retention-days: 30

  e2e-tests:
    runs-on: ubuntu-latest
    #needs: unit-integration-tests

    services:
      postgres:
        image: postgres:13-alpine
        env:
          POSTGRES_DB: anekdot_test
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build server container
        run: |
          docker build -f Dockerfile.server -t anekdot-server .

      - name: Build client container
        run: |
          docker build -f Dockerfile.client -t anekdot-tests .

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432; do
            echo "Waiting for database..."
            sleep 2
          done

      - name: Start server in background
        run: |
          docker run -d --name anekdot-server \
            --network host \
            -e NODE_ENV=test \
            -e HOST=localhost \
            -e PORT=5432 \
            -e DB_NAME=anekdot_test \
            -e USER=postgres \
            -e PASSWORD=password \
            anekdot-server

      - name: Wait for server to start
        run: |
          timeout 120s bash -c 'until curl -f http://localhost:3000/api/health >/dev/null 2>&1; do
            echo "Waiting for server to start..."
            sleep 5
          done' || (echo "Server failed to start within 120 seconds" && docker logs anekdot-server && exit 1)

      - name: Debug server state
        run: |
          echo "=== Checking server state ==="
          curl -v http://localhost:3000/api/health
          curl http://localhost:3000/api/debug/openapi-routes || echo "Debug endpoint not available"
          docker logs anekdot-server --tail 50

      - name: Check database connection from server container
        run: |
          echo "=== Testing DB connection from server container ==="
          docker exec anekdot-server node -e "
            const { Pool } = require('pg');
            const pool = new Pool({
              host: 'localhost',
              port: 5432,
              database: 'anekdot_test',
              user: 'postgres',
              password: 'password'
            });
          
            pool.query('SELECT 1 as test')
              .then(result => console.log('✅ DB connection successful:', result.rows[0]))
              .catch(error => console.error('❌ DB connection failed:', error.message))
              .finally(() => pool.end());
          "

      - name: Check server environment variables
        run: |
          echo "=== Server environment ==="
          docker exec anekdot-server printenv | grep -E "(HOST|PORT|DATABASE|USER|PASSWORD)"

      - name: Run E2E tests
        run: |
          docker run --rm \
            --network host \
            -v "$(pwd)/test-results-e2e:/app/allure-results" \
            -v "$(pwd)/allure-history-e2e:/app/allure-history" \
            anekdot-tests \
            sh -c "npm run test:e2e"

      - name: Stop server
        if: always()
        run: |
          docker stop anekdot-server || true
          docker rm anekdot-server || true

      - name: Download previous E2E allure history
        uses: actions/cache@v4
        with:
          path: allure-history-e2e
          key: allure-history-e2e-${{ github.ref }}
          restore-keys: |
            allure-history-e2e-

      - name: Generate Allure HTML Report for E2E
        if: always()
        run: |
          npm install -g allure-commandline
          mkdir -p allure-history-e2e
          allure generate test-results-e2e -o allure-report-e2e --clean --history-dir allure-history-e2e
          cp -r allure-history-e2e/. allure-report-e2e/history/ || echo "No E2E history to copy"

      - name: Save E2E allure history
        uses: actions/cache@v4
        with:
          path: allure-history-e2e
          key: allure-history-e2e-${{ github.ref }}

      - name: Upload E2E test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-results
          path: |
            allure-report-e2e/
            test-results-e2e/
          retention-days: 30